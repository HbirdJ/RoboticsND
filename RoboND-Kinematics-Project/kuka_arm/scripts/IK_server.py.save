#!/usr/bin/env python

# Copyright (C) 2017 Electric Movement Inc.
#
# This file is part of Robotic Arm: Pick and Place project for Udacity
# Robotics nano-degree program
#
# All Rights Reserved.

# Author: Harsh Pandya

# import modules
import rospy
import tf
from kuka_arm.srv import *
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
from geometry_msgs.msg import Pose
from mpmath import *
from sympy import *

#degree to radian conversions
dtr = pi/180.
rtd = 180./pi

#Standard Rotation Matrices
def rot_x(q):
    R_x = Matrix([[1,       0,       0],
                  [0,  cos(q), -sin(q)],
                  [0,  sin(q),  cos(q)]])
    return R_x

def rot_y(q):
    R_y = Matrix([[cos(q), 0,  sin(q)],
                  [0,      1,       0],
                  [-sin(q), 0, cos(q)]])
    return R_y

def rot_z(q):
    R_z = Matrix([[cos(q),  -sin(q), 0],
                  [sin(q),   cos(q), 0],
                  [     0,        0, 1]])
    return R_z

#function to take D-H parameters and return individual transform matrix
def Tdh(alpha, a, d, q):
    DHtransform = Matrix([
        [            cos(q),           -sin(q),           0,             a],
        [ sin(q)*cos(alpha), cos(q)*cos(alpha), -sin(alpha), -sin(alpha)*d],
        [ sin(q)*sin(alpha), cos(q)*sin(alpha),  cos(alpha),  cos(alpha)*d],
        [                 0,                 0,           0,             1]])
    return DHtransform

#function to build simplified total transform matrix from a given DH table
def transformbuild(DHparam):
    totaltransform = eye(4)

    print "Building transforms from given DH parameter table"

    for x in range(0,DHparam.rows):
        transform = Tdh(DHparam[x,0], DHparam[x,1], DHparam[x,2], DHparam[x,3])
        totaltransform = totaltransform*transform
        print "Tranform matrix from frame %s to %s complete" %(x,x+1)

    print "Total DH tranform complete. Simplifying"
    totaltransform = simplify(totaltransform)
    print "Simplify and build complete."

    return totaltransform

def handle_calculate_IK(req):
    rospy.loginfo("Received %s eef-poses from the plan" % len(req.poses))

    # Define DH param symbols
    q1, q2, q3, q4, q5, q6 = symbols('q1:7')
    d1, d2, d3, d4, d5, d6 = symbols('d1:7')
    a0, a1, a2, a3, a4, a5, a6 = symbols('a0:7')
    alpha0, alpha1, alpha2, alpha3, alpha4, alpha5, alpha6 = symbols('alpha0:7')

    # Joint angle symbols



    # Create Modified DH parameter matrix. Cols: (alpha, a, d, theta)
    DHparam = Matrix([
                 [    0,  0, d1, q1],
                 [-pi/2, a1,  0, q2-pi/2],
                 [    0, a2,  0, q3],
                 [-pi/2, a3, d4, q4],
                 [ pi/2,  0,  0, q5],
                 [-pi/2,  0,  0, q6],
                 [    0,  0, d7,  0]])

    # Full replacement matrix included here for comparison
    s = { alpha0:     0, a0:     0, d1:  .75,
	      alpha1: -pi/2, a1:   .35, d2:    0,
	      alpha2:     0, a2:  1.25, d3:    0,
	      alpha3: -pi/2, a3: -.054, d4:  1.5,
	      alpha4:  pi/2, a4:     0, d1:    0,
	      alpha5: -pi/2, a5:     0, d1:    0,
	      alpha6:     0, a6:  1.25, d7: .303}


    # Define Modified DH Transformation matrix
    T0_G = transformbuild(DHparam)
    T0_WC = transformbuild(DHparam[0:4,:])

    Tdh_urdf = diag(rot_z(pi) * rot_y(-pi/2), 1)
    print "Applying and simplifying transform to URDF space"
    T0_URDF = simplify(T0_G * Tdh_urdf)
    print "URDF transform complete"

    # Create individual transformation matrices



    if len(req.poses) < 1:
        print "No valid poses received"
        return -1
    else:
        # Initialize service response
        joint_trajectory_list = []
        for x in xrange(0, len(req.poses)):
            # IK code starts here
            joint_trajectory_point = JointTrajectoryPoint()

            # Extract end-effector position and orientation from request
		    # px,py,pz = end-effector position
		    # roll, pitch, yaw = end-effector orientation
            Px = req.poses[x].position.x
            Py = req.poses[x].position.y
            Pz = req.poses[x].position.z

            (roll, pitch, yaw) = tf.transformations.euler_from_quaternion(
                [req.poses[x].orientation.x, req.poses[x].orientation.y,
                    req.poses[x].orientation.z, req.poses[x].orientation.w])

            print "Roll recieved: %.2f" %roll
            print "Pitch recieved: %.2f" %pitch
            print "Yaw recieved: %.2f" %yaw

            # Calculate joint angles using Geometric IK method

            # Variables for IK trig
            link1z = .75
            link1x = .35
            link2 = 1.25
            link3DH = (1.5**2 + .054**2)**.5

            #theta1 IK
            theta1 = atan2(WCy, WCx)

            if thetatheta1 = theta1 + (2*pi)

			#theta3 DH IK
			zed = WCz - link1z
			r = (WCx**2 + WCy**2)**.5 - link1x
			el = (zed**2 + r**2)**.5
			loc = -(link2**2 + link3DH**2 - el**2)/(2 * link2 * link3DH)

			theta3DH = atan2((1-loc**2)**.5,loc)



			#theta2 DH IK

			theta2DH = pi/2 - atan2(zed, r) - atan2(link3DH*sin(theta3DH), link2 + link3DH*cos(theta3DH))

			if theta2DH < 0:
			    theta2DH = theta2DH + (2*pi)

			#adjust theta3 for proper reference frame
			theta3DH = theta3DH - pi/2 - atan2(.054, 1.5)

			if theta3DH < 0:
			    theta3DH = theta3DH + (2*pi)

            # Populate response for the IK request
            # In the next line replace theta1,theta2...,theta6 by your joint angle variables
		    joint_trajectory_point.positions = [theta1, theta2, theta3, theta4, theta5, theta6]
		    joint_trajectory_list.append(joint_trajectory_point)

        	rospy.loginfo("length of Joint Trajectory List: %s" % len(joint_trajectory_list))
        return CalculateIKResponse(joint_trajectory_list)


def IK_server():
    # initialize node and declare calculate_ik service
    rospy.init_node('IK_server')
    s = rospy.Service('calculate_ik', CalculateIK, handle_calculate_IK)
    print "Ready to receive an IK request"
    rospy.spin()

if __name__ == "__main__":
    IK_server()

